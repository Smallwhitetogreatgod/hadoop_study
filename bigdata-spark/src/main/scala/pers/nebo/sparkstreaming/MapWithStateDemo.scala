package pers.nebo.sparkstreaming

import org.apache.spark.streaming._
import org.apache.spark.SparkConf
import org.apache.spark.streaming.{Seconds, StreamingContext}

/**
  * @ author fnb
  * @ email nebofeng@gmail.com
  * @ date  2019/8/30
  * @ des :
  *
  *
   blog: updateStateByKey 与 mapWithState ： https://cloud.tencent.com/developer/article/1523891
   blog: 如何移除过期的数据: https://stor.51cto.com/art/201804/570839.htm
   blog: mapWithState 移除过期数据      https://www.jianshu.com/p/af769134aa52
  */
object MapWithStateDemo {

  def updateFunction(newValues: Seq[Int], oldValues: Option[Int]): Option[Int] = {
    val newCount = newValues.sum

    val oldCount = oldValues.getOrElse(0)

    Some(newCount + oldCount)
   }


  // Update the cumulative count using mapWithState
  // This will give a DStream made of state (which is the cumulative count of the words)
  val mappingFunc = (word: String, one: Option[Int], state: State[Int]) => {
    val sum = one.getOrElse(0) + state.getOption.getOrElse(0)
    val output = (word, sum)
    state.update(sum)
    output
  }

  def mapFunc(word:String,one:Option[Int],state:State[Int])={
    val sum = one.getOrElse(0) + state.getOption.getOrElse(0)
    val output = (word, sum)
    state.update(sum)


    output
  }

  def main(args: Array[String]): Unit = {
    val conf = new SparkConf()
    val ssc = new StreamingContext(conf,Seconds(2))

    ssc.checkpoint(".")

    // Initial state RDD for mapWithState operation
    val initialRDD = ssc.sparkContext.parallelize(List(("hello", 1), ("world", 1)))

    // Create a ReceiverInputDStream on target ip:port and count the
    // words in input stream of \n delimited test (eg. generated by 'nc')
    val lines = ssc.socketTextStream(args(0), args(1).toInt)

    val words=lines.flatMap(_.split("_"))

    val wordDstream = words.map(x => (x, 1))

/**
  * word: String, one: Option[Int], state: State[Int]
  * 这个函数里面有三个参数
  * 第一个参数：word: String  代表的就是key
  * 第二个参数：one: Option[Int] 代表的就是value
  * 第三个参数：state: State[Int] 代表的就是状态（历史状态，也就是上次的结果）
  *
  * hello,4
  *
  * hello,1
  *
  * hello,5
  */



    val updateDstream=wordDstream.updateStateByKey(updateFunction)
    val stateDstream = wordDstream.mapWithState(
      StateSpec.function(mappingFunc).initialState(initialRDD))


    stateDstream.print()


    ssc.start()
    ssc.awaitTermination()
  }





}
